"""The classical Nonisothermal Double Glazing Problem for an INCOMPRESSIBLE Newtonian Fluid"""
"""Solution Method: Finite Element Method using DOLFIN (FEniCS)"""

"""INCOMPRESSIBLE TAYLOR GALERKIN METHOD"""


from decimal import *
from dolfin import *
from mshr import *
from math import pi, sin, cos, sqrt, fabs
import numpy as np
import matplotlib.pyplot as plt
import matplotlib.tri as tri
import matplotlib.mlab as mlab
import matplotlib.patches as mpatches

# MATPLOTLIB CONTOUR FUNCTIONS
def mesh2triang(mesh):
    xy = mesh.coordinates()
    return tri.Triangulation(xy[:, 0], xy[:, 1], mesh.cells()) # Mesh Diagram

def mplot(obj):                     # Function Plot
    plt.gca().set_aspect('equal')
    if isinstance(obj, Function):
        mesh = obj.function_space().mesh()
        if (mesh.geometry().dim() != 2):
            raise(AttributeError)
        if obj.vector().size() == mesh.num_cells():
            C = obj.vector().array()
            plt.tripcolor(mesh2triang(mesh), C)
        else:
            C = obj.compute_vertex_values(mesh)
            plt.tripcolor(mesh2triang(mesh), C, shading='gouraud')
    elif isinstance(obj, Mesh):
        if (obj.geometry().dim() != 2):
            raise(AttributeError)
        plt.triplot(mesh2triang(obj), color='k')

# Define Geometry
B=1
L=1
x0 = 0.0
y0 = 0.0
x1 = B
y1 = L
m=25
nx=m*B
ny=m*L

mesh= RectangleMesh(Point(x0,y0), Point(x1, y1), nx, ny)

print('Number of Cells:', mesh.num_cells())
print('Number of Vertices:', mesh.num_vertices())


# Mesh Refine Code

for i in range(0):
      g = (max(x1,y1)-max(x0,y0))*0.1/(i+1)
      cell_domains = CellFunction("bool", mesh)
      cell_domains.set_all(False)
      for cell in cells(mesh):
          x = cell.midpoint()
          if  (x[0] < x0+g and x[1] > y1-g) or (x[0] < x0+g and x[1] < y0+g) or (x[0] > x1-g and x[1] > y1-g) or (x[0] > x1-g and x[1] < g): 
              cell_domains[cell]=True
      #plot(cell_domains, interactive=True)
      mesh = refine(mesh, cell_domains, redistribute=True)
      print('Number of Cells:', mesh.num_cells())
      print('Number of Vertices:', mesh.num_vertices())


#Define Boundaries 


class Omega0(SubDomain):
      def inside(self, x, on_boundary):
          return True if x[0] < DOLFIN_EPS and on_boundary else False 

class Omega1(SubDomain):
      def inside(self, x, on_boundary):
          return True if x[1] > L*(1.0 - DOLFIN_EPS) and on_boundary  else False  
                                                                          
class Omega1a(SubDomain):
      def inside(self, x, on_boundary):
          return True if x[1] > L*(1.0 - DOLFIN_EPS) and x[0] > B/2 - DOLFIN_EPS and on_boundary  else False   


class Omega1b(SubDomain):
      def inside(self, x, on_boundary):
          return True if x[1] > L*(1.0 - DOLFIN_EPS) and x[0] < B/2 + DOLFIN_EPS and on_boundary  else False  


class Omega2(SubDomain):
      def inside(self, x, on_boundary):
          return True if x[0] > B*(1.0 - DOLFIN_EPS)  and on_boundary else False 


class Omega3(SubDomain):
      def inside(self, x, on_boundary):
          return True if x[1] < DOLFIN_EPS and on_boundary else False   

omega1= Omega1()
omega1a= Omega1a()
omega1b= Omega1b()
omega0= Omega0()
omega2= Omega2()
omega3= Omega3()


# MARK SUBDOMAINS (Create mesh functions over the cell facets)
sub_domains = MeshFunction("size_t", mesh, mesh.topology().dim() - 1)
sub_domains.set_all(7)
omega0.mark(sub_domains, 0)
omega1a.mark(sub_domains, 2)
omega1b.mark(sub_domains, 5)
omega2.mark(sub_domains, 3)
omega3.mark(sub_domains, 4)

plot(sub_domains, interactive=True)

# Define function spaces (P2-P1)
V = VectorFunctionSpace(mesh, "CG", 2)
Q = FunctionSpace(mesh, "CG", 1)
W = FunctionSpace(mesh, "CG", 2)

# Define trial and test functions
u = TrialFunction(V)
rho=TrialFunction(Q)
p = TrialFunction(Q)
T = TrialFunction(W)
v = TestFunction(V)
q = TestFunction(Q)
r = TestFunction(W)


#Define Discretised Functions

u0=Function(V)
us=Function(V)
u12=Function(V)
u1=Function(V)
rho0=Function(Q)
rho1=Function(Q)
p00=Function(Q)
p0=Function(Q)
p1=Function(Q)
mu=Function(W)
T0=Function(W)
T1=Function(W)


boundary_parts = FacetFunction("size_t", mesh)
omega0.mark(boundary_parts,0)
omega1.mark(boundary_parts,1)
omega2.mark(boundary_parts,2)
omega3.mark(boundary_parts,3)
ds = Measure("ds")[boundary_parts]


# Set parameter values
h = mesh.hmin()
print(h)
dt = 0.005  #Time Stepping   
Tf = 0.5    #Final Time
cp = 4000.0
g=Expression(('0','-10'))
mu_0 = 5.0*10E-2
Rc = 3.33*10E1
C=250.0 #Sutherland's Constant
kappa = 25.0
heatt= 0.00
rho_0=1000.0#Pth/(Rc*(T_0+0.01))
Pr=25.0 #Prandtl Number
Ra=10.0  #Rayleigh Number
kappa = 25.0
heatt= 0.001



# Define boundary conditions
td= Constant('5')
e = Constant('6')
T_0 = 300.0 
T_h = 350.0      #Reference temperature
w=Expression('T_0+0.5*(1.0+tanh(e*t-2.5))*(T_h-T_0)', t=0.0, e=e, T_0=T_0, T_h=T_h)
sl=Expression(('0.5*(1+tanh(e*t-2.5))*25.0','0.0'), t=0.0, e=e)
pp=Expression('0.5*(1.0+tanh(e*t-2.5))*000.0', t=0.0, e=e)
uin=Expression(('-4*(x[1]-y0)*(x[1]-y1)', '0.0'), y0=y0, y1=y1)
uout=Expression(('-(x[1]-y0)*(x[1]-y1)+5', '0.0'), y0=y0, y1=y1)
T_b = Expression('T_h+(T_0-T_h)*(x[0]+x[1])*1.0/B', T_0=T_0, T_h=T_h, pi=pi, B=B)
T_l = Expression('T_0+(T_h-T_0)*(x[0]+x[1])*1.0/L', T_0=T_0, T_h=T_h, pi=pi, L=L)

 # Dirichlet Boundary Conditions 
inflow = DirichletBC(V, uin, omega0)
outflow = DirichletBC(V, (1.0,0.0), omega1)
noslip0  = DirichletBC(V, (0.0, 0.0), omega0)  # No Slip boundary conditions on the left part of the flow wall
noslip1  = DirichletBC(V, (0.0, 0.0), omega1)  # No Slip boundary conditions on the left part of the flow wall
noslip2  = DirichletBC(V, (0.0, 0.0), omega2)  # No Slip boundary conditions on the left part of the flow wall
noslip3  = DirichletBC(V, (0.0, 0.0), omega3)  # No Slip boundary conditions on the left part of the flow wall
slip  = DirichletBC(V, sl, omega0)  # Slip boundary conditions on the second part of the flow wall 
temp0 =  DirichletBC(W, T_h, omega0)    #Temperature on Omega0 
temp1a = DirichletBC(W, T_0, omega1a)
temp1b = DirichletBC(W, T_0, omega1b)
temp2 =  DirichletBC(W, T_0, omega2)    #Temperature on Omega2 
temp3 =  DirichletBC(W, T_h, omega3)    #Temperature on Omega3 
press1 = DirichletBC(Q, pp, omega0)
press2 = DirichletBC(Q, 0.0, omega1)

#Collect Boundary Conditions
bcu = [noslip0, noslip1, noslip2, noslip3]
bcp = []
bcT = [temp0, temp2]
bctau = []


"""# Initial Density Field
rho_array = rho0.vector().array()
for i in range(len(rho_array)):  
    rho_array[i] = rho_0
rho0.vector()[:] = rho_array """

# Initial Temperature Field
T_array = T0.vector().array()
for i in range(len(T_array)):  
    T_array[i] = T_0
T0.vector()[:] = T_array  



#Define Variable Parameters, Strain Rate and other tensors
mu=mu_0*(T0+C)/(T_0+C)*(T0/T_0)**(3/2)
Re=(rho_0*L*5.0)/mu_0
sr = 0.5*(grad(u0) + transpose(grad(u0)))
gamdot = inner(sr,grad(u0))
thetal = (T)/(T_h-T_0)
thetar = (T_0)/(T_h-T_0)
thetar = project(thetar,W)
theta0 = (T0-T_0)/(T_h-T_0)
alpha = 1.0/(rho0*cp)

# TAYLOR GALERKIN METHOD

# Weak Formulation 

#Half Step
a1=(1.0/(dt/2.0))*inner(u,v)*dx+0.25*Pr*inner(grad(u),grad(v))*dx
L1=(1.0/(dt/2.0))*inner(u0,v)*dx-0.25*Pr*inner(grad(u0),grad(v))*dx-inner(grad(u0)*u0,v)*dx+2.0*inner(p0,div(v))*dx-inner(p00,div(v))*dx+Ra*Pr*inner(theta0*g,v)*dx

#Predicted U* Equation
a2=(1.0/dt)*inner(u,v)*dx#+0.25*Pr*inner(grad(u),grad(v))*dx
L2=(1.0/dt)*inner(u0,v)*dx-0.25*Pr*inner(grad(u12),grad(v))*dx-inner(grad(u12)*u12,v)*dx+2.0*inner(p0,div(v))*dx-inner(p00,div(v))*dx+Ra*Pr*inner(theta0*g,v)*dx

#Continuity Equation 1
a3=inner(grad(p),grad(q))*dx
L3=inner(grad(p0),grad(q))*dx+0.5*(1.0/dt)*inner(us,grad(q))*dx

#Velocity Update
a5=(1.0/dt)*inner(u,v)*dx+0.5*Pr*inner(grad(u),grad(v))*dx
L5=(1.0/dt)*inner(us,v)*dx+0.5*(inner(p1,div(v))*dx-inner(p0,div(v))*dx)

# Temperature Update
a6 = (1.0/dt)*inner(thetal,r)*dx + inner(grad(thetal),grad(r))*dx + inner(dot(u1,grad(thetal)),r)*dx
L6 = (1.0/dt)*inner(thetar,r)*dx + inner(grad(thetar),grad(r))*dx + inner(dot(u1,grad(thetar)),r)*dx + (1.0/dt)*inner(theta0,r)*dx + inner(gamdot,r)*dx + heatt*inner(theta0,r)*ds(1)
      #+ inner(,r)*dx  #Neumann Condition on the outer bearing is encoded in the weak formulation


# Assemble matrices
A1 = assemble(a1)
A2 = assemble(a2)
A3 = assemble(a3)
A5 = assemble(a5)
A6 = assemble(a6)


# Use amg preconditioner if available
prec = "amg" if has_krylov_solver_preconditioner("amg") else "default"

# Use nonzero guesses - essential for CG with non-symmetric BC
parameters['krylov_solver']['nonzero_initial_guess'] = True

# Vector Norms 
m=norm(u1.vector()-u0.vector(),'linf')
h=norm(p1.vector()-p0.vector(),'linf')

# Time-stepping
t = dt
iter = 0            # iteration counter
maxiter = 1000
h=h+1.0
m=m+1.0
while t < Tf + DOLFIN_EPS:
    
    print("t =", t)
    # Compute tentative velocity step
    #begin("Computing tentative velocity")
    A1 = assemble(a1)
    b1 = assemble(L1)
    [bc.apply(A1, b1) for bc in bcu]
    solve(A1, u12.vector(), b1, "bicgstab", "default")
    end()
    
    #print(norm(u12.vector(),'linf'))
    
    #Compute Predicted U* Equation
    A2 = assemble(a2)
    b2 = assemble(L2)
    [bc.apply(A2, b2) for bc in bcu]
    solve(A2, us.vector(), b2, "bicgstab", "default")
    end()
    #print(norm(us.vector(),'linf'))
    
    #Continuity Equation 1
    A3 = assemble(a3)
    b3 = assemble(L3)
    [bc.apply(A3, b3) for bc in bcp]
    #[bc.apply(p1.vector()) for bc in bcp]
    solve(A3, p1.vector(), b3, "bicgstab", "default")
    end()
  

    #Velocity Update
    A5 = assemble(a5)
    b5 = assemble(L5)
    [bc.apply(A5, b5) for bc in bcu]
    solve(A5, u1.vector(), b5, "bicgstab", "default")
    end()

    
    #Temperature Equation
    A6 = assemble(a6)
    b6 = assemble(L6)
    [bc.apply(A6, b6) for bc in bcT]
    solve(A6, T1.vector(), b6, "bicgstab", "default")
    end()

    #Update Velocity Boundary Condition
    w.t = t
    pp.t = t
    sl.t = t

    # Plot solution
    plot(p1, title="Pressure", rescale=True)
    plot(u1, title="Velocity", rescale=True, mode = "auto")
    plot(T1, title="Temperature", rescale=True)

    #Redfifne Norms
    m=norm(u1.vector()-u0.vector(),'linf')
    h=norm(p1.vector()-p0.vector(),'linf')

    print("Velocity Field Time Variation", h)
    print("Pressure Field Time Variation", m)

    # Move to next time step
    u0.assign(u1)
    T0.assign(T1)
    p00.assign(p0)
    p0.assign(p1)
    t += dt


# Matlab Plot of the Solution
mplot(p1)
red_patch = mpatches.Patch(color='red', label='Pressure Field')
plt.legend(handles=[red_patch])
plt.show()
mplot(T1)
red_patch = mpatches.Patch(color='red', label='Pressure Field')
plt.legend(handles=[red_patch])
plt.show()


#Plot Contours USING MATPLOTLIB
# Scalar Function code


x = Expression('x[0]')  #GET X-COORDINATES LIST
y = Expression('x[1]')  #GET Y-COORDINATES LIST
pvals = p1.vector().array() # GET SOLUTION p= p(x,y) list
Tvals = T1.vector().array() # GET SOLUTION p= p(x,y) list
xyvals = mesh.coordinates()     # CLEAN THIS UP!!!!!!!!!!!!!!!!!!!!!!!!!!!!
xvalsq = interpolate(x, Q)#xyvals[:,0]
yvalsq= interpolate(y, Q)#xyvals[:,1]
xvalsw = interpolate(x, W)#xyvals[:,0]
yvalsw= interpolate(y, W)#xyvals[:,1]

xvals = xvalsq.vector().array()
yvals = yvalsq.vector().array()


xx = np.linspace(x0,x1)
yy = np.linspace(y0,y1)
XX, YY = np.meshgrid(xx,yy)   # (x,y) coordinate data formatted so that it can be used by plt.contour()
pp = mlab.griddata(xvals, yvals, pvals, xx, yy, interp='nn') # u(x,y) data so that it can be used by 

plt.contour(XX, YY, pp)
plt.show()

xvals = xvalsw.vector().array()
yvals = yvalsw.vector().array()

TT = mlab.griddata(xvals, yvals, Tvals, xx, yy, interp='nn') #Construct Temperature Data
plt.contour(XX, YY, TT) #Plot Temperature Data

plt.show()



#Plot Contours USING MATPLOTLIB
# Vector Function code

g=list()
h=list()
n= mesh.num_vertices()
print(u1.vector().array())   # u is the FEM SOLUTION VECTOR IN FUNCTION SPACE 
for i in range(n):
    g.append(u1.vector().array()[2*i+1])
    h.append(u1.vector().array()[2*i])

uvals = np.asarray(h) # GET SOLUTION (u,v) -> u= u(x,y) list
vvals = np.asarray(g) # GET SOLUTION (u,v) -> v= v(x,y) list


xy = Expression(('x[0]','x[1]'))  #GET MESH COORDINATES LIST
xyvalsv = interpolate(xy, V)

q=list()
r=list()

#for i in range(n):
   #q.append(xyvalsv.vector().array()[2*i+1])
   # r.append(xyvalsv.vector().array()[2*i])


plot(mesh, interactive=True)


XX, YY = np.meshgrid(xx,yy)   # (x,y) coordinate data formatted so that it can be used by plt.contour()

uu = mlab.griddata(xvals, yvals, uvals, xx, yy, interp='nn') 
vv = mlab.griddata(xvals, yvals, vvals, xx, yy, interp='nn') 

plot3 = plt.figure()
plt.streamplot(XX, YY, uu, vv, density=[0.5, 1], color='DarkRed', linewidth=0.5)       # STREAMLINE PLOT

plt.title('Stream Plot, Dynamic Colour')
plt.show(plot3)                     # display the plot


# Hold plot
plot(mesh, interactive=True)



